{"version":3,"sources":["src/services/api.ts","src/hooks/auth.tsx","src/screens/Welcome/styled.ts","src/screens/Welcome/index.tsx","src/routes/auth.routes.tsx","src/components/list_repositories/index.tsx","src/screens/list_repository/styled.ts","src/screens/list_repository/listrepository.tsx","src/routes/app.routes.tsx","src/routes/index.tsx","src/hooks/index.tsx","src/serviceWorkerRegistration.js","App.js"],"names":["api","axios","create","baseURL","interceptors","request","use","config","a","async","AsyncStorage","getItem","token","headers","Authorization","error","console","AuthContext","createContext","AuthProvider","children","useState","data","setData","signIn","useCallback","credentials","post","response","access_token","multiSet","log","CreateUser","alert","Provider","value","useAuth","context","useContext","Error","Container","styled","View","getStatusBarHeight","ViewLogin","ViewCadatro","InputEmail","TextInput","InputPassword","Welcome","email_login","setEmail_login","password_login","setPassword_login","email_cadastro","setEmail_cadastro","password_cadastro","setPassword_cadastro","Text","style","fontWeight","marginBottom","onChangeText","text","placeholder","secureTextEntry","TouchableOpacity","marginTop","backgroundColor","borderRadius","paddingLeft","paddingRight","paddingBottom","paddingTop","onPress","length","email","password","color","AuthStack","createStackNavigator","AuthRoutes","Navigator","Screen","name","component","options","header","list","item","padding","description","Linking","openURL","html_url","ViewPesquisa","ViewPesquisa2","props","user","Headers","TextName","RFPercentage","Avatar","Image","Input","ViewList","List_repository","userName","setUserName","repository","setRepository","owner","Object","keys","source","uri","avatar_url","pesquisa","dates_user","FlatList","keyExtractor","id","toString","renderItem","AppStack","AppRoutes","Routes","AppProvider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","App","NavigationContainer","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/app.c0f73a18.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nconst api = axios.create({\n    baseURL: 'https://pwa-list-repositories.herokuapp.com/v1',\n})\n\n\n\napi.interceptors.request.use(\n    async (config): Promise<AxiosRequestConfig> => {\n      const token = await AsyncStorage.getItem('@test:token');\n      //console.log(token);\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n  \n      return config;\n    },\n    (error) => {\n      console.error('Axios interceptor: ', error);\n    },\n  );\n//'http://localhost:3000/v1'\n//'https://pwa-list-repositories.herokuapp.com/v1'\n\nexport default api;","import React, {\n    createContext,\n    ReactNode,\n    useCallback,\n    useState,\n    useEffect,\n    useContext,\n    Dispatch,\n  } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api  from '../services/api';\n\n\n  interface AuthProviderProps {\n    children: ReactNode;\n  }\n\n  interface SignInCredentials {\n    email: string;\n    password: string;\n  }\n\n  interface AuthState {\n    access_token: string;\n    //refreshToken: RefreshToken;\n  }\n\n  /* interface RefreshToken {\n    id: string;\n    userId: string;\n    expiresIn: number;\n  } */\n  \n\n  interface AuthContextData {\n    token: string;\n    signIn: (credentials: SignInCredentials) => Promise<void>;\n    CreateUser: (credentials: SignInCredentials) => Promise<void>;\n  }\n  \n  const AuthContext = createContext({} as AuthContextData);\n\nfunction AuthProvider({ children }: AuthProviderProps) {\n    const [data, setData] = useState<AuthState>({} as AuthState);\n    /*useEffect(() => {\n         async function loadStoragedData(): Promise<void> {\n          const [token] = await AsyncStorage.multiGet([\n            '@test:token',\n          ]);\n    \n          if (token[1] /* && refreshToken[0] ) {\n            setData({\n              access_token: token[1],\n             // refreshToken: JSON.parse(refreshToken[0]),\n            });\n          }\n        }\n    \n        loadStoragedData();\n      }, []); */\n\n      const signIn = useCallback(async (credentials: SignInCredentials) => {\n        try {\n          const response = await api.post('auth/login', credentials);\n          const { access_token } = response.data;\n    \n          await AsyncStorage.multiSet([\n            ['@test:token', access_token],\n            //['@test:refreshToken', JSON.stringify(refreshToken)],\n          ]);\n    \n          setData({ access_token });\n        } catch (err) {\n          console.log(err);\n        }\n      }, []);\n\n      const CreateUser = useCallback(async (credentials: SignInCredentials) => {\n        try {\n          const response = await api.post('user', credentials);\n          console.log(response);\n          alert(\"Usuário Criado, por favor realize o login\")\n        } catch (err) {\n          console.log(err);\n        }\n      }, []);\n\n\n\n      return (\n        <AuthContext.Provider\n          value={{ token: data.access_token, signIn, CreateUser }}\n        >\n          {children}\n        </AuthContext.Provider>\n      );\n}\n\nfunction useAuth(): AuthContextData {\n    const context = useContext(AuthContext);\n    if (!context) {\n      throw new Error('useAuth must be used within an AuthProvider');\n    }\n  \n    return context;\n  }\n  \n  export { AuthProvider, useAuth };","import { TextInput } from 'react-native';\nimport styled from 'styled-components/native'\nimport { getStatusBarHeight} from \"react-native-iphone-x-helper\";\n\nexport const Container = styled.View`\n    margin-top: ${getStatusBarHeight()+ 150}px;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n    text-align: center;\n`;\n\nexport const ViewLogin = styled.View`\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n`;\n\nexport const ViewCadatro = styled.View`\n    margin-top: 150px;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n`;\n\nexport const InputEmail = styled.TextInput`\n    border-color: black;\n    border: 1px;\n    align-items: center;\n    align-content: center;\n    font-weight: bold;\n    margin-right: 5px;\n    border-radius: 10px;\n    justify-content: center;\n    text-align: center;\n`;\n\nexport const InputPassword = styled.TextInput`\n    margin-top: 10px;\n    border-color: black;\n    border: 1px;\n    align-items: center;\n    align-content: center;\n    font-weight: bold;\n    margin-right: 5px;\n    border-radius: 10px;\n    text-align: center;\n    justify-content: center;\n`;","import React, { useState } from \"react\";\nimport { TextInput, TouchableOpacity, Text } from \"react-native\";\nimport { useAuth } from \"../../hooks/auth\";\nimport { api } from \"../../services/api\";\nimport { Container,ViewLogin, ViewCadatro, InputEmail, InputPassword } from \"./styled\";\n\nexport function Welcome(){\n    const [email_login, setEmail_login] = useState('');\n    const [password_login, setPassword_login] = useState('')\n    const [email_cadastro, setEmail_cadastro] = useState('');\n    const [password_cadastro, setPassword_cadastro] = useState('')\n    const { signIn } = useAuth();\n\n\n    async function login_user(){\n        signIn(\n            {\n                email: email_login,\n                password: password_login,\n            }\n\n        )\n            }\n    async function create_user(){\n       \n    }\n\n    return(\n        <Container>\n            <ViewLogin> \n                <Text style={{fontWeight: 'bold', marginBottom: 5}}>Fazer Login</Text>\n                <InputEmail\n                    onChangeText={(text)=> setEmail_login(text)}\n                    value={email_login}\n                    placeholder='E-mail'\n                />\n                <InputPassword\n                    secureTextEntry={true}\n                    onChangeText={(text)=> setPassword_login(text)}\n                    value={password_login}\n                    placeholder='Password'\n                />\n                <TouchableOpacity\n                style={{marginTop: 5, backgroundColor: 'black', \n                borderRadius: 50, paddingLeft: 10, paddingRight:10, \n                paddingBottom: 5, paddingTop: 5}}\n                    onPress={()=>{\n                        if(email_login && (password_login.length >= 6)){\n                            login_user();\n                        }\n                    }}\n                >\n                    <Text style={{color:'white'}}>\n                        Login\n                    </Text>\n                </TouchableOpacity>\n            </ViewLogin> \n            <ViewCadatro>\n                <Text style={{fontWeight: 'bold', marginBottom: 5}}> Não consegue fazer o login, faça o cadastro</Text>\n                <InputEmail\n                    onChangeText={(text)=> setEmail_cadastro(text)}\n                    value={email_cadastro}\n                    placeholder='E-mail'\n                />\n                <InputPassword\n                    secureTextEntry={true}\n                    onChangeText={(text)=> setPassword_cadastro(text)}\n                    value={password_cadastro}\n                    placeholder='Password'\n                />\n                <TouchableOpacity\n                style={{marginTop: 5, backgroundColor: 'black', \n                borderRadius: 50, paddingLeft: 10, paddingRight:10, \n                paddingBottom: 5, paddingTop: 5}}\n                    onPress={()=>{\n                        if(email_cadastro && (password_cadastro.length >= 6)){\n                            create_user();\n                        }\n                    }}\n                >\n                    <Text  style={{color:'white'}}>\n                        Create User?\n                    </Text>\n                </TouchableOpacity>\n            </ViewCadatro>\n        </Container>\n    );\n}","import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Welcome } from '../screens/Welcome';\n\n\nconst AuthStack = createStackNavigator();\n\nconst AuthRoutes: React.FC = () => (\n  <AuthStack.Navigator>\n    <AuthStack.Screen name=\"SignIn\" component={Welcome}  options ={{ header: () => {}}}/>\n  </AuthStack.Navigator>\n);\n\nexport default AuthRoutes;","import React from \"react\";\nimport { View, Text, Linking } from \"react-native\";\n\nexport function list({item}){\n    return(\n        <View style={{padding: 5}}>\n            <Text>Name: {item.name}</Text>\n            <Text>Descrição: {item.description}</Text>\n            <Text style={{color: 'blue'}}\n                onPress={() => Linking.openURL(item.html_url)}>\n            Link github: {item.name}\n            </Text>\n        </View>\n    );\n}","import styled from 'styled-components/native'\nimport { getStatusBarHeight} from \"react-native-iphone-x-helper\";\nimport {RFPercentage} from 'react-native-responsive-fontsize';\n\ninterface user{\n    user?:boolean;\n}\n\nexport const Container = styled.View`\n    flex: 1;\n    align-items: center;\n    align-content: center;\n    margin-top: ${getStatusBarHeight()}px;\n`;\n\nexport const ViewPesquisa = styled.View`\n   flex-direction: row;\n   align-items: center;\n   align-content: center;\n`;\n\nexport const ViewPesquisa2 = styled.View<user>`\n   align-items: center;\n   align-content: center;\n   ${props => props.user ? `margin-top: 10px;` : `margin-top: 20px;`}\n`;\n\nexport const Headers = styled.View`\n    padding: 5px;\n    margin-top: 10px;\n    flex-direction: row;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n`;\n\nexport const TextName = styled.Text`\n    margin-left: 5px;\n    font-size: ${RFPercentage(2.825)}px;\n    font-weight: bold;\n`;\n\nexport const Avatar = styled.Image`\n    width: ${RFPercentage(15.441)}px;\n    height: ${RFPercentage(15.441)}px;\n    border-radius: ${RFPercentage(7.705)}px;\n`;\n\n\nexport const Input = styled.TextInput`\n    border-color: black;\n    border: 1px;\n    align-items: center;\n    align-content: center;\n    font-weight: bold;\n    margin-right: 5px;\n`;\nexport const ViewList = styled.View``;\n","import React, {  useEffect, useState } from 'react';\nimport {FlatList, Text, TouchableOpacity, Linking, View} from 'react-native';\nimport { list } from '../../components/list_repositories';\nimport api  from '../../services/api';\nimport { Container, ViewPesquisa, Headers, Avatar, TextName, Input, ViewPesquisa2, ViewList } from './styled';\n\ninterface user{\n    length: number;\n    login: string;\n    name: string;\n    avatar_url: string;\n}\n\ninterface repository{\n    owner: user;\n    id: number;\n    length: number;\n    name: string;\n    html_url: string;\n    description: string;\n    \n}\n\n\nexport function List_repository(){\n    const [userName, setUserName] = useState('');\n\n    //const [user, setUser] = useState<user>({} as user);\n    const [repository, setRepository] = useState<repository[]>([]);\n\n    async function dates_user(){\n        const response = await api.post(`historic`, {pesquisa: userName});\n        setRepository(response.data);\n\n    }\n    \n    //const user  = \n    let user = {} as user;\n    try {\n        user = repository[0].owner;\n    } catch(error){\n        user = {}as user;\n    }\n\n     console.log(user);\n    //Object.keys(user).length !==0\n\n    return(\n        <Container>\n            { Object.keys(user).length !==0 &&\n                <Headers>\n                    <Avatar\n                        source={{uri: user.avatar_url}}\n                    />\n                    <TextName>{user.name}</TextName>\n                </Headers>   \n            } \n            <ViewPesquisa2 user={Object.keys(user).length !==0}>\n                <Text style={{marginBottom:5}}>Coloque o nome do usuário que deseja ver os repositórios</Text>\n                <ViewPesquisa>\n                    <Input\n                        onChangeText={(text)=> setUserName(text)}\n                        value={userName}\n                    />\n                    <TouchableOpacity\n                    style={{backgroundColor: 'black', padding: 5, borderRadius: 10}}\n                    onPress={()=> {if(userName !==\"\")dates_user()}}\n                    >\n                    <Text style={{color: 'white'}}>Procurar usuario</Text>\n                    </TouchableOpacity>\n                </ViewPesquisa>\n            </ViewPesquisa2>\n            <ViewList>\n                <FlatList\n                    data={repository}\n                    keyExtractor={item => (item.id).toString()}\n                    renderItem={list}\n                />\n            </ViewList>\n\n        </Container>\n    );\n}\n\n","import React from 'react';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport { List_repository } from '../screens/list_repository/listrepository';\n\n\nconst AppStack = createStackNavigator();\n\nconst AppRoutes: React.FC = () => (\n  <AppStack.Navigator>\n    <AppStack.Screen name=\"Dashboard\" component={List_repository} options ={{ header: () => {}}} />\n  </AppStack.Navigator>\n);\n\nexport default AppRoutes;","import React from 'react';\nimport { useAuth } from '../hooks/auth';\n\nimport AuthRoutes from '../routes/auth.routes';\n import AppRoutes from '../routes/app.routes';\n\nconst Routes: React.FC = () => {\n  const { token } = useAuth();\n\n  return token ?  <AppRoutes/>: <AuthRoutes /> ;\n};\n\nexport default Routes;","import React, { ReactNode } from 'react';\nimport { AuthProvider } from './auth';\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport function AppProvider({ children }: AppProviderProps) {\n  return <AuthProvider>{children}</AuthProvider>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  const isEnvProduction = process.env.NODE_ENV === \"production\";\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nimport Routes from \"./src/routes/index\";\nimport { AppProvider } from './src/hooks';\n\nimport * as serviceWorkerRegistration from \"./src/serviceWorkerRegistration\";\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <AppProvider>\n        <Routes />\n      </AppProvider>\n    </NavigationContainer>\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}